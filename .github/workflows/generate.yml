name: build
on:
  push:
    branches:
      - main
      
permissions: write-all

jobs:
  cache-artifacts:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: node-cache
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - uses: actions/cache@v2
        env:
          cache-name: python-cache
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install Dependencies
        run: |
          npm install
          pip3 install -r requirements.txt
      - name: Build
        run: npm build
      - name: 'Download & Cache Stanford CoreNLP 🏋️'
        run: |
          wget -P tmp "https://downloads.cs.stanford.edu/nlp/software/stanford-ner-4.2.0.zip"
          unzip tmp/stanford-ner-4.2.0.zip -d tmp/
      - name: ' Cache🪨'
        uses: actions/cache@v2
        env:
          cache-name: core-nlp
        with:
          path: ~/.tmp/stanford-ner-2020-11-17
          key: ${{ runner.os }}-{{ hashFiles('**lockfiles') }}-stanford-core-nlp

  generate:
    needs: cache-artifacts
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - name: 'Checkout 🧞'
        uses: actions/checkout@v2
      - name: 'Download Stanford CoreNLP 🏋️'
        if: steps.core-nlp.outputs.cache-hit != 'true'
        run: |
          wget -P tmp "https://downloads.cs.stanford.edu/nlp/software/stanford-ner-4.2.0.zip"
          unzip tmp/stanford-ner-4.2.0.zip -d tmp/
      - name: 'Install npm dependencies 🪨'
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: npm install
      - name: 'Install python deps 🐍'
        if: steps.python-cache.outputs.cache-hit != 'true'
        run: pip3 install -r requirements.txt
      - name: 'compile 🏗️'
        run : npx tsc
      - name: 'Prepare 🧑‍🍳'
        run: |
          mkdir tmp/dist
          mkdir tmp/dist/feeds
          mkdir tmp/dist/podcasts
          mkdir tmp/dist/podcasts_palettes
          mkdir tmp/dist/.github
          mkdir tmp/dist/.github/workflows
      - name: 'Generate Files 🤖'
        run: node --max-old-space-size=8192 out/index.js
      - name: 'Build workflow Files 🏕️'
        run: node --max-old-space-size=8192 out/lib/workflows.js
      - name: 'Generate Palette 🎨'
        run : |
          python3 scripts/generate.py
          cp -r source dist
          cp -r typings dist
          cp -r scripts dist
          cp tsconfig.json dist/tsconfig.json
          cp package.json dist/package.json
          cp package-lock.json dist/package-lock.json
          cp LICENSE.txt dist/LICENSE.txt
          cp docs/dataReadMe.md dist/ReadMe.md
          cp tmp/tasks.yml dist/.github/workflows/tasks.yml
          mkdir dist/.github
          mkdir dist/.github/workflows
          cp .github/workflows/release.yml dist/.github/workflows/release.yml
      - name: Verify Changed files 🐒
        uses: tj-actions/verify-changed-files@v8.3
        id: verify-changed-files
        with:
          files: |
            dist
      - name: 'Deploy 💾'
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        uses: s0/git-publish-subdir-action@develop
        env:
          REPO: self
          BRANCH: dist
          FOLDER: dist
          GITHUB_TOKEN: ${{ secrets.POD_DATA_GEN }}
